[logics for room 36 -- castle wall top

%include	"rm36.msg"
%include "gamedefs"


%define	rock.time.min			20	[	define local constants
%define	rock.time.max			100
%define	rocky				20
%define	rock.bottom			166
%define	no.more.rocks			77	[	rocks only fall if ego below this
%define	rock.step.size			4	[	how far a rock moves each frame
%define	left.side				20	[	where climbable wall starts
%define	right.side			128
%define	rock.x.left			20
%define	rock.x.right			128


%define	rock.1.hit.bottom		lf0	[	define local variables
%define	rock.2.hit.bottom		lf1
%define	remove.rock.1			lf2
%define	remove.rock.2			lf3
%define	rock.1.falling			lf6
%define	rock.2.falling			lf7
%define	read.bumped.head.message	lf8
%define	print.pig.gone.message	lf9


%define	rock.1.timer			lv0
%define	rock.2.timer			lv1
%define	rock.x				lv2
%define	rock.y				lv3
%define	rock.left				lv4
%define	rock.right			lv5
%define	rock.1.bottom			lv9
%define	rock.1.top			lv10
%define	danger.rock.1.left.x	lv11
%define	danger.rock.1.right.x	lv12
%define	danger.rock.2.left.x	lv13
%define	danger.rock.2.right.x	lv14
%define	rock.2.bottom			lv15
%define	rock.2.top			lv16


%object	a.rock.1			small1	[	define objects
%object	a.rock.2			small2
%object	a.vines			medium1


if (init.log)						[	initialize room
	{
	rock.1.timer = 35;
	rock.2.timer = 50;

	if (t.with.pig)
		{
		reset( t.with.pig);
		set( pig.in.castle);
		set( print.pig.gone.message);
		pig.timer.2 = pig.init;
		}

	room.bottom = fall.through;		[	fall clear out of this room
	load.logics( climbing.room);		[	load climbing gear
	load.sound( s.ego.falling);
	load.view( v.ego.climbing.wall);
	load.view( v.ego.falling);

	load.view( v.falling.rock);		[	load views of objects
	load.view( v.vines);

	load.pic( current.room);
	draw.pic( current.room);
	discard.pic( current.room);


	animate.obj( a.rock.1);			[	animate objects
	set.view( a.rock.1, v.falling.rock);[	set views of all objects
	position( a.rock.1, 30, 30);		[	phony positions to prevent
	ignore.horizon( a.rock.1);		[	premature gotchas!
	ignore.blocks( a.rock.1);
	ignore.objs( a.rock.1);
	set.priority( a.rock.1, 15);
	work = rock.step.size;
	step.size( a.rock.1, work);

	animate.obj( a.rock.2);
	set.view( a.rock.2, v.falling.rock);
	position( a.rock.2, 60, 30);
	ignore.horizon( a.rock.2);
	ignore.blocks( a.rock.2);
	ignore.objs( a.rock.2);
	set.priority( a.rock.2, 15);
	work = rock.step.size;
	step.size( a.rock.2, work);

	animate.obj( a.vines);
	ignore.horizon( a.vines);
	ignore.blocks( a.vines);
	ignore.objs( a.vines);
	set.view( a.vines, v.vines);
	position( a.vines, 48, 65);
	set.priority( a.vines, 4);
	if (vines.open)
		{
		draw( a.vines);
		}

	if (ego.x < left.side)
		{
		ego.x = left.side;
		}
	else
		{
		if (ego.x > right.side)
			{
			ego.x = right.side;
			}
		}

	if (previous.room == 38)			[	position ego
		{
		ego.x = 60;
		ego.y = 74;
		}

	[	
	[	So this room's init.log aligns
	[	 with rm35.cg.
	[	

	position.v( ego, ego.x, ego.y);
	start.climbing = on.wall;
	call( climbing.room);

	show.pic();

	if (print.pig.gone.message)
		{
		print( 11);
		}

	return();

	}							[	end init.log



if (ego.falling)
	{
	goto have.rocks.hit.bottom;
	}

if (lookit)
	{
	if (!posn( ego, 33, 0, 63, 75))	[	ego near window
		{
		print( 1);				[   "your life passes before your eyes
		}
	else
		{
		if (vines.open)			[	"here's the old window
			{
			print( 5);
			}
		else						[	"here's a vine-covered window
			{
			print( 2);
			}
		}
	}


if (!doit && !useit)			{goto no.input;}
if (useit)					{goto use.it;}

[*****
:do.it							[he pressed the "do something" button
[*****

if (posn( ego, 33, 0, 63, 75))
	{
	set( have.match);
	if (!vines.open)				[	ego near window
		{
		print( 13);
		}
	else
		{
		print( 3);				[	"it looks like vines here
		}
	}

goto no.input;


[*****
:use.it							[he pressed "use current obj" button
[*****

if (object.used == u.dagger)
	{
	set( have.match);
	if (!posn( ego, 33, 0, 63, 85))	[	ego near window
		{
		print( 7);				[	"nice prune job, Taran
		}
	else
		{
		if (vines.open)
			{
			print( 8);		 	[	"you prune a little more
			}
		else
			{
			print( 4);			[	"you cut open the vines
			set( vines.open);
			draw( a.vines);
			}
		}
	}

[*****
:no.input
[*****		 

if  (ego.climbing == on.wall &&
	hit.special &&
	!ego.falling)
	{
	print( 12);
	}

[*****
:make.a.rock
[*****


if (ego.y > no.more.rocks)			[	no rocks if ego 2High2BeFair
	{
	--rock.1.timer;
	if (rock.1.timer == 1)
		{
		random( rock.x.left, rock.x.right, x);
		y = rocky;
		position.f( a.rock.1, x, y);
		draw( a.rock.1);
		y = rock.bottom;
		step = rock.step.size;
		move.obj.f( a.rock.1, x, y, step, rock.1.hit.bottom);
		set( rock.1.falling);
		danger.rock.1.left.x = x;
		danger.rock.1.left.x -= ego.width;
		danger.rock.1.right.x = x;
		danger.rock.1.right.x += rock.width;
		rock.1.top = rocky;
		rock.1.bottom = rocky;
		rock.1.bottom += ego.height;
		}

	--rock.2.timer;
	if (rock.2.timer == 1)
		{
		random( rock.x.left, rock.x.right, x);
		y = rocky;
		position.f( a.rock.2, x, y);
		draw( a.rock.2);
		y = rock.bottom;
		step = rock.step.size;
		move.obj.f( a.rock.2, x, y, step, rock.2.hit.bottom);
		set( rock.2.falling);
		danger.rock.2.left.x = x;
		danger.rock.2.left.x -= ego.width;
		danger.rock.2.right.x = x;
		danger.rock.2.right.x += rock.width;
		rock.2.top = rocky;
		rock.2.bottom = rocky;
		rock.2.bottom += ego.height;
		}
	}


[*****
:collision.detection
[*****

if (rock.1.falling)
	{
	if  (ego.x > danger.rock.1.left.x &&
		ego.x < danger.rock.1.right.x)
		{
		if  (rock.1.bottom > ego.y &&
			rock.1.top < ego.y)
			{
			set( remove.rock.1);
			set( remove.rock.2);
			print( 9);			[	then, IT'S A HIT!!
			start.climbing = falling;
			}
		}
	rock.1.bottom += rock.step.size;
	rock.1.top += rock.step.size;
	}

if (rock.2.falling)
	{
	if  (ego.x > danger.rock.2.left.x &&
		ego.x < danger.rock.2.right.x)
		{
		if  (rock.2.bottom > ego.y &&
			rock.2.top < ego.y)
			{
			set( remove.rock.1);
			set( remove.rock.2);
			print( 9);			[	then, IT'S A HIT!!
			start.climbing = falling;
			}
		}
	rock.2.bottom += rock.step.size;
	rock.2.top += rock.step.size;
	}


[*****
:have.rocks.hit.bottom
[*****

if (rock.1.hit.bottom)
	{
	reset( rock.1.hit.bottom);
	set( remove.rock.1);
	random( rock.time.min, rock.time.max, rock.1.timer);
	}

if (rock.2.hit.bottom)
	{
	reset( rock.2.hit.bottom);
	set( remove.rock.2);
	random( rock.time.min, rock.time.max, rock.2.timer);
	}


[*****
:exit							[	test for leaving the room
[*****

if (remove.rock.1)
	{
	reset( remove.rock.1);
	erase( a.rock.1);
	reset( rock.1.hit.bottom);
	reset( rock.1.falling);
	rock.1.top = 0;
	rock.1.bottom = 0;
	}

if (remove.rock.2)
	{
	reset( remove.rock.2);
	erase( a.rock.2);
	reset( rock.2.hit.bottom);
	reset( rock.2.falling);
	rock.2.top = 0;
	rock.2.bottom = 0;
	}

call( climbing.room);

if (edge.ego.hit == bottom)
	{
	new.room( 35);
	}

if  (vines.open &&
	posn( ego, 43, 0, 53, 90))		[	inside the now-open window.
	{
	ego.climbing = 0;
	print( 6);
	current.ego.view = normal;
	new.room( 38);
	}

if (edge.ego.hit == top && !read.bumped.head.message)
	{
	set( read.bumped.head.message);
	print( 10);
	}
